1)# patient/filters/patient_profile_filters.py
from django.db.models import Q
from django_filters import rest_framework as django_filters
from patient.models.patient_profile import PatientProfile


class PatientProfileFilter(django_filters.FilterSet):
    blood_type = django_filters.CharFilter(lookup_expr="exact")
    condition = django_filters.CharFilter(method="filter_condition")
    appointment_after = django_filters.DateTimeFilter(
        field_name="next_appointment", lookup_expr="gte"
    )

    class Meta:
        model = PatientProfile
        fields = ["blood_type", "condition", "appointment_after"]

    def filter_condition(self, queryset, name, value):
        return queryset.filter(
            Q(medical_history__icontains=value)
            | Q(current_medications__icontains=value)
        )

2)# patient/models/health_metric.py
from django.db import models
from .patient_profile import PatientProfile


class HealthMetric(models.Model):
    patient = models.ForeignKey(
        PatientProfile, on_delete=models.CASCADE, related_name="health_metrics"
    )
    metric_type = models.CharField(
        max_length=20,
        choices=[
            ("blood_pressure", "Blood Pressure"),
            ("weight", "Weight"),
            ("heart_rate", "Heart Rate"),
        ],
    )
    value = models.CharField(max_length=20)
    timestamp = models.DateTimeField(auto_now_add=True)

3)# patient/models/medical_history.py
from django.db import models
from .patient_profile import PatientProfile


class MedicalHistoryEntry(models.Model):
    patient = models.ForeignKey(
        PatientProfile, on_delete=models.CASCADE, related_name="medical_history_entries"
    )
    title = models.CharField(max_length=200)
    description = models.TextField()
    date_occurred = models.DateField()
    is_chronic = models.BooleanField(default=False)

4)# patient/models/mood_log.py
from django.db import models
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
from patient.models.patient_profile import PatientProfile


class MoodLog(models.Model):
    patient = models.ForeignKey(
        PatientProfile, on_delete=models.CASCADE, related_name="mood_logs"
    )
    mood_rating = models.IntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(10)]
    )
    notes = models.TextField(blank=True)
    logged_at = models.DateTimeField(default=timezone.now)

    class Meta:
        ordering = ["-logged_at"]
        indexes = [models.Index(fields=["patient", "logged_at"])]

5)# patient/models/patient_profile.py
from django.db import models
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid
from users.models import CustomUser
from users.models.profile import Profile


class PatientProfile(Profile):
    BLOOD_TYPE_CHOICES = [
        ("A+", "A Positive"),
        ("A-", "A Negative"),
        ("B+", "B Positive"),
        ("B-", "B Negative"),
        ("AB+", "AB Positive"),
        ("AB-", "AB Negative"),
        ("O+", "O Positive"),
        ("O-", "O Negative"),
    ]

    GENDER_CHOICES = [
        ("M", "Male"),
        ("F", "Female"),
        ("O", "Other"),
        ("N", "Prefer not to say"),
    ]

    user = models.OneToOneField(
        CustomUser, on_delete=models.CASCADE, related_name="patient_profile"
    )

    unique_id = models.UUIDField(
        default=uuid.uuid4,
        editable=False,
        unique=True,
        db_index=True,
        verbose_name="Patient ID",
        null=False,
    )
    emergency_contact = models.JSONField(default=dict, blank=True, null=True)
    medical_history = models.TextField(blank=True, null=True)
    current_medications = models.TextField(blank=True, null=True)
    blood_type = models.CharField(
        max_length=3, choices=BLOOD_TYPE_CHOICES, blank=True, null=True
    )
    treatment_plan = models.TextField(blank=True, null=True)
    pain_level = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(10)], blank=True, null=True
    )
    gender = models.CharField(
        max_length=1,
        choices=GENDER_CHOICES,
        blank=True,
        null=True,
        help_text="Patient's gender identification",
    )

    profile_pic = models.ImageField(
        upload_to="patient_profile_pics/%Y/%m/", null=True, blank=True
    )

    last_appointment = models.DateTimeField(blank=True, null=True)
    next_appointment = models.DateTimeField(blank=True, null=True)

    created_at = models.DateTimeField(editable=False, null=True)
    updated_at = models.DateTimeField()

    class Meta:
        verbose_name = "Patient Profile"
        verbose_name_plural = "Patient Profiles"
        ordering = ["-created_at"]

    def __str__(self):
        return f"{self.user.username}'s Patient Profile"

    def save(self, *args, **kwargs):
        if not self.pk:  # Object is being created
            self.created_at = timezone.now()
        self.updated_at = timezone.now()
        super().save(*args, **kwargs)

6)# patient/serializers/health_metric.py
from rest_framework import serializers
from patient.models.health_metric import HealthMetric


class HealthMetricSerializer(serializers.ModelSerializer):
    class Meta:
        model = HealthMetric
        fields = "__all__"
        read_only_fields = ["patient", "timestamp"]

7)# patient/serializers/medical_history.py
from rest_framework import serializers
from patient.models.medical_history import MedicalHistoryEntry


class MedicalHistorySerializer(serializers.ModelSerializer):
    class Meta:
        model = MedicalHistoryEntry
        fields = "__all__"
        read_only_fields = ["patient"]

8)# patient/serializers/mood_log.py
from drf_spectacular.utils import extend_schema_field
from rest_framework import serializers
from patient.models.mood_log import MoodLog


class MoodLogSerializer(serializers.ModelSerializer):
    patient_username = serializers.SerializerMethodField()

    class Meta:
        model = MoodLog
        fields = [
            "id",
            "patient",
            "patient_username",
            "mood_rating",
            "notes",
            "logged_at",
        ]
        read_only_fields = ["patient", "logged_at"]

    @extend_schema_field(serializers.CharField)  # Or the appropriate type
    def get_patient_username(self, obj) -> str:  # Add type hint
        return obj.patient.user.username if obj.patient and obj.patient.user else None

9)# patient/serializers/patient_profile.py
from rest_framework import serializers
from patient.models.patient_profile import PatientProfile
import logging

logger = logging.getLogger(__name__)


class PatientProfileSerializer(serializers.ModelSerializer):
    blood_type = serializers.CharField(max_length=3, required=False, allow_null=True)
    pain_level = serializers.IntegerField(
        min_value=0, max_value=10, required=False, allow_null=True
    )
    user_name = serializers.SerializerMethodField()

    class Meta:
        model = PatientProfile
        fields = [
            "id",
            "user",
            "user_name",
            "medical_history",
            "current_medications",
            "profile_pic",
            "blood_type",
            "treatment_plan",
            "pain_level",
            "last_appointment",
            "next_appointment",
            "created_at",
            "updated_at",
        ]
        read_only_fields = ["user", "created_at", "updated_at"]

    def get_user_name(self, obj):
        full_name = f"{obj.user.first_name} {obj.user.last_name}".strip()
        return full_name if full_name else obj.user.username

    def validate_blood_type(self, value):
        valid_types = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
        if value and value not in valid_types:
            raise serializers.ValidationError(
                f"Invalid blood type. Must be one of: {', '.join(valid_types)}"
            )
        return value

    def validate_profile_pic(self, value):
        if value:
            if value.size > 5 * 1024 * 1024:  # 5MB limit
                raise serializers.ValidationError("Image file too large ( > 5MB )")

            allowed_types = ["image/jpeg", "image/png", "image/gif"]
            if value.content_type not in allowed_types:
                raise serializers.ValidationError(
                    f"Invalid file type. Must be one of: {', '.join(allowed_types)}"
                )

            try:
                from PIL import Image

                img = Image.open(value)
                max_dimensions = (2000, 2000)
                if img.width > max_dimensions[0] or img.height > max_dimensions[1]:
                    raise serializers.ValidationError(
                        f"Image dimensions too large. Max dimensions: {max_dimensions[0]}x{max_dimensions[1]}"
                    )
            except ImportError:
                logger.warning("PIL not installed, skipping dimension validation")
            except Exception as e:
                logger.error(f"Error validating image dimensions: {str(e)}")

        return value

10)# patient/views/health_metric_views.py
from rest_framework import viewsets
from rest_framework import permissions
from patient.models.health_metric import HealthMetric
from patient.serializers.health_metric import HealthMetricSerializer
from patient.models.patient_profile import PatientProfile
from rest_framework.exceptions import ValidationError


class HealthMetricViewSet(viewsets.ModelViewSet):
    serializer_class = HealthMetricSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return HealthMetric.objects.filter(patient__user=self.request.user)

    def perform_create(self, serializer):
        try:
            patient = PatientProfile.objects.get(user=self.request.user)
        except PatientProfile.DoesNotExist:
            raise ValidationError("Patient profile not found.")
        serializer.save(patient=patient)

11)# patient/views/medical_history_views.py
from rest_framework import viewsets
from rest_framework import permissions
from rest_framework.exceptions import ValidationError
from patient.models.medical_history import MedicalHistoryEntry
from patient.serializers.medical_history import MedicalHistorySerializer


class MedicalHistoryViewSet(viewsets.ModelViewSet):
    serializer_class = MedicalHistorySerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return MedicalHistoryEntry.objects.filter(patient__user=self.request.user)

    def perform_create(self, serializer):
        if not hasattr(self.request.user, "patientprofile"):
            raise ValidationError(
                "Patient profile not found. Please create one before recording medical history."
            )
        serializer.save(patient=self.request.user.patientprofile)

12)# patient/views/mood_log_views.py
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated
from drf_spectacular.utils import extend_schema, extend_schema_view
from patient.models.mood_log import MoodLog
from patient.models.patient_profile import PatientProfile
from patient.serializers.mood_log import MoodLogSerializer
from rest_framework.exceptions import ValidationError


@extend_schema_view(
    list=extend_schema(
        description="List mood log entries for the authenticated patient.",
        summary="List Mood Logs",
        tags=["Mood Log"],
    ),
    retrieve=extend_schema(
        description="Retrieve a specific mood log entry.",
        summary="Retrieve Mood Log",
        tags=["Mood Log"],
    ),
    create=extend_schema(
        description="Create a new mood log entry for the patient.",
        summary="Create Mood Log",
        tags=["Mood Log"],
    ),
)
class MoodLogViewSet(viewsets.ModelViewSet):
    serializer_class = MoodLogSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return MoodLog.objects.filter(patient__user=self.request.user)

    def perform_create(self, serializer):
        try:
            patient = PatientProfile.objects.get(user=self.request.user)
        except PatientProfile.DoesNotExist:
            raise ValidationError(
                "Patient profile not found. Please create one before logging a mood."
            )
        serializer.save(patient=patient)

13)# patient/views/patient_profile_views.py
from rest_framework import viewsets, permissions, filters
from rest_framework.decorators import action
from rest_framework.response import Response
from django_filters import rest_framework as django_filters
from drf_spectacular.utils import extend_schema, extend_schema_view
from patient.models.patient_profile import PatientProfile
from patient.serializers.patient_profile import PatientProfileSerializer
from patient.filters.patient_profile_filters import PatientProfileFilter
import logging
from media_handler.models import MediaFile
from users.permissions.user import IsSuperUserOrSelf

logger = logging.getLogger(__name__)


@extend_schema_view(
    list=extend_schema(
        description="Get patient profile information",
        summary="Get Patient Profile",
        tags=["Patient Profile"],
    ),
    retrieve=extend_schema(
        description="Get detailed patient profile", tags=["Patient Profiles"]
    ),
    update=extend_schema(
        description="Update patient profile information",
        summary="Update Patient Profile",
        tags=["Patient Profile"],
    ),
    partial_update=extend_schema(
        description="Partially update profile information",
        summary="Patch Profile",
        tags=["Patient Profile"],
    ),
)
class PatientProfileViewSet(viewsets.ModelViewSet):
    lookup_field = "unique_id"  # Use unique_id for lookups
    serializer_class = PatientProfileSerializer
    permission_classes = [permissions.IsAuthenticated, IsSuperUserOrSelf]
    filter_backends = [
        django_filters.DjangoFilterBackend,
        filters.SearchFilter,
        filters.OrderingFilter,
    ]
    filterset_class = PatientProfileFilter
    search_fields = ["medical_history", "current_medications"]
    ordering_fields = ["created_at", "next_appointment"]
    http_method_names = ["get", "put", "patch", "delete"]

    def get_queryset(self):
        if self.request.user.is_superuser:
            return PatientProfile.objects.select_related("user").all()
        return PatientProfile.objects.select_related("user").filter(
            user=self.request.user
        )

    @action(detail=True, methods=["get"])
    def appointments(self, request, unique_id=None):
        profile = self.get_object()
        return Response(
            {
                "last_appointment": profile.last_appointment,
                "next_appointment": profile.next_appointment,
                "has_upcoming": bool(profile.next_appointment),
            }
        )

    @action(detail=True, methods=["post"])
    def upload_file(self, request, unique_id=None):
        patient_profile = request.user.patientprofile
        uploaded_file = request.FILES.get("file")

        media_file = MediaFile.objects.create(
            file=uploaded_file,
            media_type="document",
            content_object=patient_profile,
            uploaded_by=request.user,
        )
        return Response({"status": "file uploaded", "file_id": media_file.id})

15)# patient/apps.py
from django.apps import AppConfig


class PatientConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "patient"

16)# patient/urls.py
from django.urls import path
from patient.views.health_metric_views import HealthMetricViewSet
from patient.views.medical_history_views import MedicalHistoryViewSet
from patient.views.mood_log_views import MoodLogViewSet
from patient.views.patient_profile_views import PatientProfileViewSet

urlpatterns = [
    path(
        "profiles/",
        PatientProfileViewSet.as_view({"get": "list"}),
        name="patient-profile-list",
    ),
    path(
        "profiles/<uuid:unique_id>/",
        PatientProfileViewSet.as_view(
            {
                "get": "retrieve",
                "put": "update",
                "patch": "partial_update",
                "delete": "destroy",
            }
        ),
        name="patient-profile-detail",
    ),
    path(
        "profiles/<uuid:unique_id>/appointments/",
        PatientProfileViewSet.as_view({"get": "appointments"}),
        name="patient-appointments",
    ),
    path(
        "mood-logs/",
        MoodLogViewSet.as_view({"get": "list", "post": "create"}),
        name="mood-log-list",
    ),
    path(
        "mood-logs/<int:pk>/",
        MoodLogViewSet.as_view(
            {
                "get": "retrieve",
                "put": "update",
                "patch": "partial_update",
                "delete": "destroy",
            }
        ),
        name="mood-log-detail",
    ),
    path(
        "health-metrics/",
        HealthMetricViewSet.as_view({"get": "list", "post": "create"}),
        name="health-metric-list",
    ),
    path(
        "health-metrics/<int:pk>/",
        HealthMetricViewSet.as_view(
            {"get": "retrieve", "put": "update", "delete": "destroy"}
        ),
        name="health-metric-detail",
    ),
    path(
        "medical-history/",
        MedicalHistoryViewSet.as_view({"get": "list", "post": "create"}),
        name="medical-history-list",
    ),
    path(
        "medical-history/<int:pk>/",
        MedicalHistoryViewSet.as_view(
            {"get": "retrieve", "put": "update", "delete": "destroy"}
        ),
        name="medical-history-detail",
    ),
]

