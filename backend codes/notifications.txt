1)# notifications/consumers.py
from channels.generic.websocket import AsyncJsonWebsocketConsumer
import logging

logger = logging.getLogger(__name__)


class NotificationConsumer(AsyncJsonWebsocketConsumer):
    async def connect(self):
        if self.scope["user"].is_anonymous:
            logger.warning(
                "Anonymous user attempted to connect to notification websocket"
            )
            await self.close()
            return

        self.group_name = f"user_{self.scope['user'].id}_notifications"

        try:
            await self.channel_layer.group_add(self.group_name, self.channel_name)
            await self.accept()
            logger.info(
                f"User {self.scope['user'].username} connected to notifications"
            )
        except Exception as e:
            logger.error(f"Error in websocket connection: {str(e)}")
            await self.close()

    async def disconnect(self, close_code):
        try:
            if hasattr(self, "group_name"):
                await self.channel_layer.group_discard(
                    self.group_name, self.channel_name
                )
                logger.info(
                    f"User {self.scope['user'].username} disconnected from notifications"
                )
        except Exception as e:
            logger.error(f"Error in websocket disconnection: {str(e)}")

    async def receive_json(self, content):
        # Handle incoming messages if needed
        pass

    async def notification_message(self, event):
        try:
            await self.send_json(event["message"])
        except Exception as e:
            logger.error(f"Error sending notification message: {str(e)}")
            await self.close()

2)# notifications/middleware.py
from channels.middleware import BaseMiddleware
from channels.db import database_sync_to_async
from django.contrib.auth.models import AnonymousUser
import logging

logger = logging.getLogger(__name__)


class WebSocketAuthMiddleware(BaseMiddleware):
    async def __call__(self, scope, receive, send):
        scope = dict(scope)
        if scope["type"] == "websocket":
            scope["user"] = await self.get_user(scope)
        return await super().__call__(scope, receive, send)

    @database_sync_to_async
    def get_user(self, scope):
        try:
            if "session" not in scope:
                logger.warning("No session found in WebSocket scope")
                return AnonymousUser()

            session_key = scope["session"].get("_auth_user_id")
            if not session_key:
                logger.warning("No user ID found in session")
                return AnonymousUser()

            from django.contrib.auth import get_user_model

            User = get_user_model()
            user = User.objects.get(id=session_key)
            logger.debug(f"Successfully authenticated WebSocket user: {user.username}")
            return user

        except Exception as e:
            logger.error(f"WebSocket authentication error: {str(e)}")
            return AnonymousUser()

3)# notifications/models.py
from django.db import models
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.utils import timezone
from users.models import CustomUser
import logging

logger = logging.getLogger(__name__)


class NotificationType(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    default_enabled = models.BooleanField(default=True)
    is_global = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        indexes = [
            models.Index(fields=["name"]),
            models.Index(fields=["is_global"]),
        ]

    def __str__(self):
        return f"{self.name} ({'global' if self.is_global else 'user'})"


class Notification(models.Model):
    PRIORITY_CHOICES = [
        ("low", "Low"),
        ("medium", "Medium"),
        ("high", "High"),
        ("critical", "Critical"),
    ]

    user = models.ForeignKey(
        CustomUser, on_delete=models.CASCADE, related_name="notifications"
    )
    notification_type = models.ForeignKey(NotificationType, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    message = models.TextField()
    read = models.BooleanField(default=False)
    priority = models.CharField(
        max_length=20, choices=PRIORITY_CHOICES, default="medium"
    )
    metadata = models.JSONField(default=dict, blank=True)
    created_at = models.DateTimeField(default=timezone.now)

    # Generic foreign key for linking to various content types
    content_type = models.ForeignKey(
        ContentType, on_delete=models.CASCADE, null=True, blank=True
    )
    object_id = models.UUIDField(null=True, blank=True)
    content_object = GenericForeignKey("content_type", "object_id")

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["-created_at"]),
            models.Index(fields=["read"]),
            models.Index(fields=["priority"]),
        ]

    def __str__(self):
        return f"{self.user}: {self.title}"

    def mark_read(self):
        self.read = True
        self.save()

4)# notifications/receivers.py
from django.db.models.signals import post_migrate
from django.dispatch import receiver
from .models import NotificationType

DEFAULT_NOTIFICATION_TYPES = [
    ("system_alert", "Important system alerts and updates"),
    ("appointment_reminder", "Notifications about upcoming appointments"),
    ("new_message", "Notifications about new messages"),
    ("therapy_update", "Updates from therapy sessions"),
    ("security_alert", "Security-related notifications"),
]


@receiver(post_migrate)
def create_default_notification_types(sender, **kwargs):
    if sender.name == "notifications":
        for name, desc in DEFAULT_NOTIFICATION_TYPES:
            NotificationType.objects.get_or_create(
                name=name,
                defaults={
                    "description": desc,
                    "default_enabled": True,
                    "is_global": True,
                },
            )

5)# notifications/routing.py
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r"ws/notifications/$", consumers.NotificationConsumer.as_asgi()),
]

6)# notifications/serializers.py
from rest_framework import serializers
from .models import Notification, NotificationType


class NotificationTypeSerializer(serializers.ModelSerializer):
    class Meta:
        model = NotificationType
        fields = ["id", "name", "description", "default_enabled", "is_global"]


class NotificationSerializer(serializers.ModelSerializer):
    notification_type = NotificationTypeSerializer(read_only=True)

    class Meta:
        model = Notification
        fields = [
            "id",
            "title",
            "message",
            "read",
            "priority",
            "created_at",
            "notification_type",
            "metadata",
        ]


class NotificationUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Notification
        fields = ["read"]

7)# notifications/services.py
from .models import Notification, NotificationType
from users.models import UserPreferences
import logging
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

logger = logging.getLogger(__name__)


class UnifiedNotificationService:
    def __init__(self):
        self.type_cache = {}

    def get_or_create_notification_type(self, type_name):
        """Get or create a notification type with default settings."""
        try:
            notification_type = NotificationType.objects.get(name=type_name)
            logger.info(f"Found existing notification type: {type_name}")
        except NotificationType.DoesNotExist:
            notification_type = NotificationType.objects.create(
                name=type_name,
                description=f"Notification type for {type_name}",
                default_enabled=True,
                is_global=True,
            )
            logger.info(f"Created new notification type: {type_name}")
        return notification_type

    def send_notification(self, user, notification_type_name, title, message, **kwargs):
        try:
            # Ensure notification type exists
            notification_type = self.get_or_create_notification_type(
                notification_type_name
            )

            # Check user preferences
            preferences = UserPreferences.objects.get_or_create(user=user)[0]
            if not self._check_notification_allowed(preferences, notification_type):
                logger.debug(
                    f"Notification {notification_type_name} not allowed for {user}"
                )
                return None

            # Create notification
            notification = Notification.objects.create(
                user=user,
                notification_type=notification_type,
                title=title,
                message=message,
                priority=kwargs.get("priority", "medium"),
                metadata=kwargs.get("metadata", {}),
                content_object=kwargs.get("content_object"),
            )

            # Handle different channels
            if kwargs.get("send_email", False):
                self._send_email_notification(user, notification, preferences)

            if kwargs.get("send_in_app", True):
                self._send_in_app_notification(user, notification)

            return notification

        except Exception as e:
            logger.error(f"Error sending notification: {str(e)}", exc_info=True)
            if kwargs.get("send_in_app", True):
                self._send_in_app_notification(user, notification)

            return notification

        except Exception as e:
            logger.error(f"Error sending notification: {str(e)}")
            return None

    def _check_notification_allowed(self, preferences, notification_type):
        # Check global enable/disable first
        if not preferences.in_app_notifications:
            return False

        # Check type-specific settings
        if notification_type.is_global:
            return (
                notification_type.default_enabled
                and not preferences.disabled_notification_types.filter(
                    id=notification_type.id
                ).exists()
            )
        else:
            return notification_type.default_enabled

    def _send_email_notification(self, user, notification, preferences):
        if preferences.email_notifications:
            # Implement actual email sending logic here
            logger.info(f"Sent email notification to {user.email}")

    def _send_in_app_notification(self, user, notification):
        try:
            channel_layer = get_channel_layer()
            notification_data = {
                "id": notification.id,
                "type": notification.notification_type.name,
                "title": notification.title,
                "message": notification.message,
                "timestamp": notification.created_at.isoformat(),
                "priority": notification.priority,
            }

            async_to_sync(channel_layer.group_send)(
                f"user_{user.id}_notifications",
                {"type": "notification.message", "message": notification_data},
            )
            logger.info(f"Sent WebSocket notification to user {user.username}")
            return True

        except Exception as e:
            logger.error(f"Error sending WebSocket notification: {str(e)}")
            return False

8)# notifications/signals.py
from django.db.models.signals import post_migrate, post_save
from django.dispatch import receiver
from .models import NotificationType, Notification
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import logging

logger = logging.getLogger(__name__)

DEFAULT_NOTIFICATION_TYPES = [
    ("system_alert", "Important system alerts and updates", True),
    ("appointment_reminder", "Notifications about upcoming appointments", True),
    ("new_message", "Notifications about new messages", True),
    ("therapy_update", "Updates from therapy sessions", True),
    ("security_alert", "Security-related notifications", True),
    ("one_to_one_message", "Notification for new direct messages", True),
]


@receiver(post_migrate)
def create_default_notification_types(sender, **kwargs):
    """Create default notification types after migrations."""
    if sender.name == "notifications":
        for name, desc, is_global in DEFAULT_NOTIFICATION_TYPES:
            try:
                NotificationType.objects.get_or_create(
                    name=name,
                    defaults={
                        "description": desc,
                        "default_enabled": True,
                        "is_global": is_global,
                    },
                )
            except Exception as e:
                logger.error(f"Error creating notification type {name}: {str(e)}")


@receiver(post_save, sender=Notification)
def send_notification_websocket(sender, instance, created, **kwargs):
    """Send WebSocket notification when a new notification is created."""
    if created:
        try:
            channel_layer = get_channel_layer()
            async_to_sync(channel_layer.group_send)(
                f"user_{instance.user.id}_notifications",
                {
                    "type": "notification.message",
                    "message": {
                        "id": str(instance.id),
                        "type": instance.notification_type.name,
                        "title": instance.title,
                        "message": instance.message,
                        "timestamp": instance.created_at.isoformat(),
                        "priority": instance.priority,
                    },
                },
            )
        except Exception as e:
            logger.error(f"Error sending WebSocket notification: {str(e)}")

9)# notifications/urls.py
from django.urls import path
from .views import NotificationViewSet

urlpatterns = [
    path("", NotificationViewSet.as_view({"get": "list"}), name="notification-list"),
    path(
        "<uuid:pk>/",
        NotificationViewSet.as_view({"get": "retrieve", "patch": "partial_update"}),
        name="notification-detail",
    ),
    path(
        "mark-all-read/",
        NotificationViewSet.as_view({"post": "mark_all_read"}),
        name="mark-all-read",
    ),
]

10)# notifications/views.py
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.db import transaction
from django.core.exceptions import ValidationError
from drf_spectacular.utils import extend_schema
from .models import Notification
from .serializers import NotificationSerializer, NotificationUpdateSerializer
import logging

logger = logging.getLogger(__name__)


class NotificationViewSet(viewsets.ModelViewSet):
    serializer_class = NotificationSerializer
    permission_classes = [permissions.IsAuthenticated]
    http_method_names = ["get", "patch", "post", "head", "options"]

    def get_queryset(self):
        """Get notifications for the current user with type information."""
        return (
            Notification.objects.filter(user=self.request.user)
            .select_related("notification_type")
            .order_by("-created_at")
        )

    @extend_schema(
        description="Update notification status",
        request=NotificationUpdateSerializer,
        responses={200: NotificationSerializer},
    )
    def partial_update(self, request, *args, **kwargs):
        try:
            with transaction.atomic():
                instance = self.get_object()
                serializer = NotificationUpdateSerializer(
                    instance, data=request.data, partial=True
                )
                serializer.is_valid(raise_exception=True)
                serializer.save()
                return Response(NotificationSerializer(instance).data)
        except ValidationError as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Error updating notification: {str(e)}")
            return Response(
                {"error": "Internal server error"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

    @extend_schema(
        description="Mark all unread notifications as read",
        responses={
            200: {
                "type": "object",
                "properties": {
                    "status": {"type": "string"},
                    "count": {"type": "integer"},
                },
            }
        },
    )
    @action(detail=False, methods=["post"])
    def mark_all_read(self, request):
        try:
            with transaction.atomic():
                updated = request.user.notifications.filter(read=False).update(
                    read=True
                )
                return Response({"status": "success", "count": updated})
        except Exception as e:
            logger.error(f"Error marking notifications as read: {str(e)}")
            return Response(
                {"error": "Internal server error"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

